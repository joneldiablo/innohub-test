{"version":3,"sources":["../src/InnohubTest.js"],"names":["InnohubTest","input","output","i","length","push","join","obj","result","recursive","item","key","Array","isArray","Error","JSON","stringify","Object","keys","forEach","n","app","use","express","json","urlencoded","extended","knex","client","connection","host","user","password","database","Model","allModels","ModelElement","modelName","controller","AbstractController","tableName","console","log","get","req","res","next","getByID","post","set","patch","update","delete","listen"],"mappings":"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","file":"InnohubTest.js","sourcesContent":["\nimport express from \"express\";\nimport Knex from \"knex\";\nimport { Model } from 'objection';\n\n// own libriry\nimport AbstractController from \"abstract-controller\";\nimport allModels from \"./api/model/innohub-test\";\n\nexport default class InnohubTest {\n\n  constructor() {\n\n  }\n\n  /**\n   * \n   * @param {string} input string which goings to reverse\n   * @returns {string} string reversed\n   */\n  reverse(input = '') {\n    let output = [];\n    for (let i = input.length; i >= 0; i--) {\n      output.push(input[i]);\n    }\n    output = output.join('');\n    return output;\n  }\n\n  /**\n * \n * @param {*} obj\n * @param {string} obj.input string which goings to reverse\n * @returns {boolean} done\n */\n  reverseSameObject(obj) {\n    let output = [];\n    for (let i = obj.input.length; i >= 0; i--) {\n      output.push(obj.input[i]);\n    }\n    output = output.join('');\n    obj.input = output;\n    return true;\n  }\n\n  /**\n   * \n   * @param {*} obj \n   */\n  fold(obj) {\n    obj.result = 0;\n    const recursive = (item, key) => {\n      if (Array.isArray(item) || (typeof item !== 'number' && typeof item !== 'object')) {\n        throw new Error(`${key} (${JSON.stringify(item)}) is not a number`);\n      }\n      if (typeof item === 'object') {\n        return Object.keys(item)\n          .forEach(i => recursive(item[i], i));\n      }\n      switch (key) {\n        case 'bar':\n        case 'result':\n          break;\n        default:\n          obj.result += item;\n          break;\n      }\n    };\n    recursive(obj);\n    return true;\n  }\n\n  plusIndex(n) {\n    let output = 0;\n    for (let i = 1; i <= n; i++) {\n      output += i;\n    }\n    return output;\n  }\n\n  apiRest() {\n    const PORT = 4000;\n    let app = express();\n    app.use(express.json());\n    app.use(express.urlencoded({ extended: true }));\n\n    // Initialize knex.\n    const knex = Knex({\n      client: 'mysql',\n      connection: {\n        host: 'localhost',\n        user: 'root',\n        password: 'root',\n        database: 'innohub-test'\n      }\n    });\n    Model.knex(knex);\n    // Right way: create every controller\n    Object.keys(allModels).forEach(modelName => {\n      let ModelElement = allModels[modelName];\n      let controller = new AbstractController(ModelElement);\n      let { tableName } = ModelElement;\n      console.log(tableName);\n      app.get('/' + tableName, (req, res, next) => { controller.get(req, res, next) });\n      app.get(`/${tableName}/:ID`, (req, res, next) => { controller.getByID(req, res, next) });\n      app.post('/' + tableName, (req, res, next) => { controller.set(req, res, next) });\n      app.patch('/' + tableName, (req, res, next) => { controller.update(req, res, next) });\n      app.delete('/' + tableName, (req, res, next) => { controller.delete(req, res, next) });\n    });\n\n    app.listen(PORT, () => console.log(`Listening on port ${PORT}!`));\n  }\n}\n"]}