{"version":3,"sources":["../src/InnohubTest.js"],"names":["InnohubTest","input","output","i","length","push","join","obj","result","recursive","item","key","Array","isArray","Error","JSON","stringify","Object","keys","forEach","n"],"mappings":"qoBAEqBA,Y,YAEnB,YAAc,wBAEb,CAED;;;;6DAKoB,CAElB,OAFMC,EAEN,wDAFc,EAEd,CADIC,EAAS,EACb,CAASC,EAAIF,EAAMG,MAAnB,CAAgC,CAAL,GAA3B,CAAmCD,GAAnC,CACED,EAAOG,IAAP,CAAYJ,EAAME,CAAN,CAAZ,EAGF,MADAD,GAASA,EAAOI,IAAP,CAAY,EAAZ,CACT,CAAOJ,CACR,CAED;;;;;+CAMkBK,C,CAAK,CAErB,OADIL,GAAS,EACb,CAASC,EAAII,EAAIN,KAAJ,CAAUG,MAAvB,CAAoC,CAAL,GAA/B,CAAuCD,GAAvC,CACED,EAAOG,IAAP,CAAYE,EAAIN,KAAJ,CAAUE,CAAV,CAAZ,EAIF,MAFAD,GAASA,EAAOI,IAAP,CAAY,EAAZ,CAET,CADAC,EAAIN,KAAJ,CAAYC,CACZ,GACD,CAED;;;oCAIKK,C,CAAK,CACRA,EAAIC,MAAJ,CAAa,CADL,CAER,GAAMC,GAAY,SAACC,CAAD,CAAOC,CAAP,CAAe,CAC/B,GAAIC,MAAMC,OAAN,CAAcH,CAAd,GAAwC,QAAhB,QAAOA,EAAP,EAA4C,QAAhB,uBAAOA,EAAP,qBAAOA,CAAP,EAAxD,CACE,KAAM,IAAII,MAAJ,CAAaH,CAAb,MAAqBI,KAAKC,SAAL,CAAeN,CAAf,CAArB,qBAAN,CAEF,GAAoB,QAAhB,uBAAOA,EAAP,qBAAOA,CAAP,EAAJ,CACE,MAAOO,QAAOC,IAAP,CAAYR,CAAZ,EACJS,OADI,CACI,kBAAKV,GAAUC,EAAKP,CAAL,CAAV,CAAmBA,CAAnB,CAAL,CADJ,CAAP,CAGF,OAAQQ,CAAR,EACE,IAAK,KAAL,CACA,IAAK,QAAL,CACE,MACF,QACEJ,EAAIC,MAAJ,EAAcE,CADhB,CAJF,CAQD,CAhBD,CAkBA,MADAD,GAAUF,CAAV,CACA,GACD,C,oCAESa,C,CAAG,CAEX,OADIlB,GAAS,CACb,CAASC,EAAI,CAAb,CAAgBA,GAAKiB,CAArB,CAAwBjB,GAAxB,CACED,GAAUC,CAAV,CAEF,MAAOD,EACR,C,yBArEkBF,W","file":"InnohubTest.js","sourcesContent":["\n\nexport default class InnohubTest {\n\n  constructor() {\n\n  }\n\n  /**\n   * \n   * @param {string} input string which goings to reverse\n   * @returns {string} string reversed\n   */\n  reverse(input = '') {\n    let output = [];\n    for (let i = input.length; i >= 0; i--) {\n      output.push(input[i]);\n    }\n    output = output.join('');\n    return output;\n  }\n\n  /**\n * \n * @param {*} obj\n * @param {string} obj.input string which goings to reverse\n * @returns {boolean} done\n */\n  reverseSameObject(obj) {\n    let output = [];\n    for (let i = obj.input.length; i >= 0; i--) {\n      output.push(obj.input[i]);\n    }\n    output = output.join('');\n    obj.input = output;\n    return true;\n  }\n\n  /**\n   * \n   * @param {*} obj \n   */\n  fold(obj) {\n    obj.result = 0;\n    const recursive = (item, key) => {\n      if (Array.isArray(item) || (typeof item !== 'number' && typeof item !== 'object')) {\n        throw new Error(`${key} (${JSON.stringify(item)}) is not a number`);\n      }\n      if (typeof item === 'object') {\n        return Object.keys(item)\n          .forEach(i => recursive(item[i], i));\n      }\n      switch (key) {\n        case 'bar':\n        case 'result':\n          break;\n        default:\n          obj.result += item;\n          break;\n      }\n    };\n    recursive(obj);\n    return true;\n  }\n\n  plusIndex(n) {\n    let output = 0;\n    for (let i = 1; i <= n; i++) {\n      output += i;\n    }\n    return output;\n  }\n\n}\n"]}