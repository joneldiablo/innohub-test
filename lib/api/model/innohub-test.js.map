{"version":3,"sources":["../../../src/api/model/innohub-test.js"],"names":["require","Model","AddressModel","ProjectownershiptypeModel","ProjecttypeModel","ProjectModel","RelationProjectTagModel","RelationProjectUserOwnershiptypeModel","RelationTaskModel","RelationUserCountryModel","SessiontypeModel","SessionModel","TagModel","TaskscoreModel","TaskModel","UserModel","type","required","search","properties","id","lineAddress","city","state","country","name","description","creationDate","updateDate","projecttype","relation","BelongsToOneRelation","modelClass","join","from","to","tagId","projectId","tag","project","userId","ownershipTypeId","user","projectownershiptype","tagIdRel","task","countryId","expiration","sessiontype","taskid","score","releaseDate","owner","deadline","cancelDate","order","lastname","curp","rfc","address","genre","username","password","email","module","exports"],"mappings":"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","file":"innohub-test.js","sourcesContent":["/**\n * File generated with objection-model-generator OMG!!!!\n */\n\nconst {\n  Model\n} = require('objection');\n\nlet AddressModel;\nlet ProjectownershiptypeModel;\nlet ProjecttypeModel;\nlet ProjectModel;\nlet RelationProjectTagModel;\nlet RelationProjectUserOwnershiptypeModel;\nlet RelationTaskModel;\nlet RelationUserCountryModel;\nlet SessiontypeModel;\nlet SessionModel;\nlet TagModel;\nlet TaskscoreModel;\nlet TaskModel;\nlet UserModel;\n\n/**\n * address model\n * @extends Model\n */\nAddressModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'address';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['lineAddress','city','state','country',],\n      search: ['lineAddress',],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        lineAddress: {\n          type: 'string'\n        },\n        city: {\n          type: 'integer'\n        },\n        state: {\n          type: 'integer'\n        },\n        country: {\n          type: 'integer'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n    };\n  }\n\n}\n\n/**\n * projectOwnershipTypes model\n * @extends Model\n */\nProjectownershiptypeModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'projectOwnershipTypes';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['name',],\n      search: ['name','description',],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        name: {\n          type: 'string'\n        },\n        description: {\n          type: 'string'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n    };\n  }\n\n}\n\n/**\n * projectTypes model\n * @extends Model\n */\nProjecttypeModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'projectTypes';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['name',],\n      search: ['name','description',],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        name: {\n          type: 'string'\n        },\n        description: {\n          type: 'string'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n    };\n  }\n\n}\n\n/**\n * projects model\n * @extends Model\n */\nProjectModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'projects';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['name','type',],\n      search: ['name',],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        name: {\n          type: 'string'\n        },\n        type: {\n          type: 'integer'\n        },\n        creationDate: {\n          type: 'date-time'\n        },\n        updateDate: {\n          type: 'date-time'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n      projecttype: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: ProjecttypeModel,\n        join: {\n          from: 'projects.type',\n          to: 'projectTypes.id'\n        }\n      },\n    };\n  }\n\n}\n\n/**\n * relation-projects-tags model\n * @extends Model\n */\nRelationProjectTagModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'relation-projects-tags';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['tagId','projectId',],\n      search: [],\n      properties: {\n        tagId: {\n          type: 'integer'\n        },\n        projectId: {\n          type: 'integer'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n      tag: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: TagModel,\n        join: {\n          from: 'relation-projects-tags.tagId',\n          to: 'tags.id'\n        }\n      },\n      project: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: ProjectModel,\n        join: {\n          from: 'relation-projects-tags.projectId',\n          to: 'projects.id'\n        }\n      },\n    };\n  }\n\n}\n\n/**\n * relation-projects-users-ownershipType model\n * @extends Model\n */\nRelationProjectUserOwnershiptypeModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'relation-projects-users-ownershipType';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['userId','projectId','ownershipTypeId',],\n      search: [],\n      properties: {\n        userId: {\n          type: 'integer'\n        },\n        projectId: {\n          type: 'integer'\n        },\n        ownershipTypeId: {\n          type: 'integer'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n      user: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: UserModel,\n        join: {\n          from: 'relation-projects-users-ownershipType.userId',\n          to: 'users.id'\n        }\n      },\n      project: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: ProjectModel,\n        join: {\n          from: 'relation-projects-users-ownershipType.projectId',\n          to: 'projects.id'\n        }\n      },\n      projectownershiptype: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: ProjectownershiptypeModel,\n        join: {\n          from: 'relation-projects-users-ownershipType.ownershipTypeId',\n          to: 'projectOwnershipTypes.id'\n        }\n      },\n    };\n  }\n\n}\n\n/**\n * relation-tasks model\n * @extends Model\n */\nRelationTaskModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'relation-tasks';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['tagId','tagIdRel',],\n      search: [],\n      properties: {\n        tagId: {\n          type: 'integer'\n        },\n        tagIdRel: {\n          type: 'integer'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n      task: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: TaskModel,\n        join: {\n          from: 'relation-tasks.tagId',\n          to: 'tasks.id'\n        }\n      },\n      task: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: TaskModel,\n        join: {\n          from: 'relation-tasks.tagIdRel',\n          to: 'tasks.id'\n        }\n      },\n    };\n  }\n\n}\n\n/**\n * relation-users-countries model\n * @extends Model\n */\nRelationUserCountryModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'relation-users-countries';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['userId','countryId',],\n      search: [],\n      properties: {\n        userId: {\n          type: 'integer'\n        },\n        countryId: {\n          type: 'integer'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n      user: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: UserModel,\n        join: {\n          from: 'relation-users-countries.userId',\n          to: 'users.id'\n        }\n      },\n    };\n  }\n\n}\n\n/**\n * sessionTypes model\n * @extends Model\n */\nSessiontypeModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'sessionTypes';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['name',],\n      search: ['name','description',],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        name: {\n          type: 'string'\n        },\n        description: {\n          type: 'string'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n    };\n  }\n\n}\n\n/**\n * sessions model\n * @extends Model\n */\nSessionModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'sessions';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['userId','type','expiration',],\n      search: [],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        userId: {\n          type: 'integer'\n        },\n        type: {\n          type: 'integer'\n        },\n        expiration: {\n          type: 'date-time'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n      sessiontype: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: SessiontypeModel,\n        join: {\n          from: 'sessions.type',\n          to: 'sessionTypes.id'\n        }\n      },\n    };\n  }\n\n}\n\n/**\n * tags model\n * @extends Model\n */\nTagModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'tags';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['name',],\n      search: ['name','description',],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        name: {\n          type: 'string'\n        },\n        description: {\n          type: 'string'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n    };\n  }\n\n}\n\n/**\n * taskScores model\n * @extends Model\n */\nTaskscoreModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'taskScores';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: [],\n      search: ['description',],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        taskid: {\n          type: 'integer'\n        },\n        description: {\n          type: 'string'\n        },\n        score: {\n          type: 'number'\n        },\n        releaseDate: {\n          type: 'date-time'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n      task: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: TaskModel,\n        join: {\n          from: 'taskScores.taskid',\n          to: 'tasks.id'\n        }\n      },\n    };\n  }\n\n}\n\n/**\n * tasks model\n * @extends Model\n */\nTaskModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'tasks';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['name','owner',],\n      search: ['name','description',],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        name: {\n          type: 'string'\n        },\n        description: {\n          type: 'string'\n        },\n        owner: {\n          type: 'integer'\n        },\n        creationDate: {\n          type: 'date-time'\n        },\n        updateDate: {\n          type: 'date-time'\n        },\n        deadline: {\n          type: 'date-time'\n        },\n        cancelDate: {\n          type: 'date-time'\n        },\n        order: {\n          type: 'integer'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n      user: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: UserModel,\n        join: {\n          from: 'tasks.owner',\n          to: 'users.id'\n        }\n      },\n    };\n  }\n\n}\n\n/**\n * users model\n * @extends Model\n */\nUserModel = class extends Model {\n\n  /**\n   * @override\n   */\n  static get tableName() {\n    return 'users';\n  }\n\n  /**\n   * @override\n   */\n  static get jsonSchema() {\n    return {\n      type: 'object',\n      required: ['name','curp','rfc','username','email',],\n      search: ['name','lastname','curp','rfc','username','email',],\n      properties: {\n        id: {\n          type: 'integer'\n        },\n        name: {\n          type: 'string'\n        },\n        lastname: {\n          type: 'string'\n        },\n        curp: {\n          type: 'string'\n        },\n        rfc: {\n          type: 'string'\n        },\n        address: {\n          type: 'integer'\n        },\n        genre: {\n          type: 'integer'\n        },\n        username: {\n          type: 'string'\n        },\n        password: {\n          type: 'string'\n        },\n        email: {\n          type: 'string'\n        },\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  static get relationMappings() {\n    return {\n      address: {\n        relation: Model.BelongsToOneRelation,\n        modelClass: AddressModel,\n        join: {\n          from: 'users.address',\n          to: 'address.id'\n        }\n      },\n    };\n  }\n\n}\n\n\nmodule.exports = {\n  AddressModel,\n  ProjectownershiptypeModel,\n  ProjecttypeModel,\n  ProjectModel,\n  RelationProjectTagModel,\n  RelationProjectUserOwnershiptypeModel,\n  RelationTaskModel,\n  RelationUserCountryModel,\n  SessiontypeModel,\n  SessionModel,\n  TagModel,\n  TaskscoreModel,\n  TaskModel,\n  UserModel,\n}"]}